name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint and format check
        run: |
          pnpm lint
          pnpm format:check
          
      - name: Build
        run: pnpm build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  npm-publish:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Publish to NPM
        run: pnpm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  docker-build:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        if: startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: mashh-lab/mcp-agent-proxy
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ startsWith(github.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  binary-build:
    needs: build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux
            ext: ''
          - os: macos-latest
            target: macos
            ext: ''
          - os: windows-latest
            target: windows
            ext: '.exe'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          
      - name: Install pnpm
        run: npm install -g pnpm
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
          
      - name: Install pkg
        run: npm install -g pkg
        
      - name: Build binary
        run: pkg dist/mcp-server.js --target node18-${{ matrix.target }}-x64 --output mcp-agent-proxy-${{ matrix.target }}${{ matrix.ext }}
        
      - name: Upload binary
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: mcp-agent-proxy-${{ matrix.target }}${{ matrix.ext }}

  github-release:
    needs: [npm-publish, docker-build, binary-build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            binary-linux/mcp-agent-proxy-linux
            binary-macos/mcp-agent-proxy-macos
            binary-windows/mcp-agent-proxy-windows.exe
          body: |
            ## Installation
            
            ### PNPM Package (Recommended)
            ```bash
            pnpm add -g mcp-agent-proxy@${{ github.ref_name }}
            ```
            
            ### NPM Package (Alternative)
            ```bash
            npm install -g mcp-agent-proxy@${{ github.ref_name }}
            ```
            
            ### Docker Image
            ```bash
            docker pull mashh-lab/mcp-agent-proxy:${{ github.ref_name }}
            ```
            
            ### Binary Downloads
            - **Linux**: Download `mcp-agent-proxy-linux`
            - **macOS**: Download `mcp-agent-proxy-macos` 
            - **Windows**: Download `mcp-agent-proxy-windows.exe`
            
            See [INSTALL.md](INSTALL.md) for detailed installation instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 